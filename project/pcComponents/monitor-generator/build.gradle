// DroidMate, an automated execution generator for Android apps.
// Copyright (C) 2012-2018. Saarland University
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
// Current Maintainers:
// Nataniel Borges Jr. <nataniel dot borges at cispa dot saarland>
// Jenny Hotzkow <jenny dot hotzkow at cispa dot saarland>
//
// Former Maintainers:
// Konrad Jamrozik <jamrozik at st dot cs dot uni-saarland dot de>
//
// web: www.droidmate.org

import org.droidmate.buildsrc.BuildKt

apply plugin: 'kotlin'
apply from: project(":project:pcComponents").file("debug.gradle")

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

dependOnJunit(project)

dependencies {

	compile 'com.github.natanieljr:droidmate-common:master-SNAPSHOT'

	compile 'com.google.code.gson:gson:2.8.5'

	compile 'ch.qos.logback:logback-classic:1.2.3'
	compile 'ch.qos.logback:logback-core:1.2.3'
	compile 'org.slf4j:slf4j-api:1.7.25'

	compile project(":project:pcComponents:monitor-template")
}
/*
//region Tasks to setup resources necessary for a call to MonitorGeneratorFrontend

// Ensure BuildKt.monitored_apis_txt is available at runtime as a resource. 
processResources.configure { Copy copy ->

	File monitoredApisTxt = project(":project:pcComponents").file("resources/${BuildKt.monitored_apis_xml}")
	assert monitoredApisTxt.file

	evaluationDependsOn(":project:pcComponents:monitor-template")
	// !!! DUPLICATION WARNING !!! with the file name and file location of class org.droidmate.monitor.MonitorJavaTemplate
	File monitorJavaTemplateSource = findProject(":project:pcComponents:monitor-template").sourceSets.main.java.find {
		it.name == "MonitorJavaTemplate.java"
	} as File
	assert monitorJavaTemplateSource.file

	copy.from(monitoredApisTxt, monitorJavaTemplateSource).rename(monitorJavaTemplateSource.name, BuildKt.monitor_generator_res_name_monitor_template)
}

//endregion

//region Tasks calling MonitorGeneratorFrontend, outputting generatedMonitor_apiXX
apply plugin: 'application'
mainClassName = "org.droidmate.monitor.MonitorGeneratorFrontend"
JavaExec runTask = tasks.run as JavaExec
def generateMonitor = { JavaExec je, List<String> args, File generatedMonitor ->
	je.group = "build"
	["main", "classpath", "standardOutput"].each { je."$it" = runTask."$it" }

	je.args = args
	// Output is not muted as we want to see in Gradle build logcat output
	//je.standardOutput = new ByteArrayOutputStream() // Mute the task stdout
	je.outputs.file generatedMonitor

	je.doLast { assert generatedMonitor.file }
}

def generatedMonitor = { int apiLevel -> new File(runTask.workingDir, BuildKt.generated_monitor(apiLevel)) }
task generateMonitor_api23(type: JavaExec) { generateMonitor(it as JavaExec, ["api23"], generatedMonitor(23)) }

//endregion

evaluationDependsOn(":project:pcComponents:commonLib")
Jar libCommonJarTask = findProject(":project:pcComponents:commonLib").jar as Jar

File monitorApkScaffoldingDir = project(":project:pcComponents").file("monitor-apk-scaffolding")
assert monitorApkScaffoldingDir.directory


def copyFileWithRename = { File copiedFile, File targetFile ->
	assert targetFile.parentFile.directory
	copy { it.from(copiedFile).into(targetFile.parent).rename { targetFile.name } }
}

def assembleApk = { GradleBuild gradleBuildTask, int apiLevel ->
	File monitorApkScaffoldingBuildGradle = new File(monitorApkScaffoldingDir, "build.gradle")
	assert monitorApkScaffoldingBuildGradle.file
	gradleBuildTask.buildFile = monitorApkScaffoldingBuildGradle
	gradleBuildTask.tasks = ["assembleApi$apiLevel".toString()]
}

def monitorJava = { int apiLevel -> new File(monitorApkScaffoldingDir, "src/api$apiLevel/java/org/droidmate/monitor/Monitor.java") }
File apkScaffoldingOutput = new File(monitorApkScaffoldingDir, "build")
def apkScaffoldingOutputApk = { int apiLevel -> new File(apkScaffoldingOutput, "outputs/apk/api$apiLevel/release/monitor-apk-scaffolding-api$apiLevel-release-unsigned.apk") }
def monitorApk = { int apiLevel -> new File(buildDir, "monitor_api${apiLevel}.apk") }

File libsBuilt = new File(monitorApkScaffoldingDir, "libs_built")

def buildMonitorApk = { GradleBuild task, int apiLevel ->
	task.dependsOn([libCommonJarTask, tasks.getByName("generateMonitor_api$apiLevel")])

	task.group = "build"

	task.inputs.files libCommonJarTask
	task.inputs.files tasks.getByName("generateMonitor_api$apiLevel")

	File libsApi = new File(monitorApkScaffoldingDir, "libs_api$apiLevel")
	assert libsApi.directory
	task.inputs.files fileTree(dir: libsApi, include: '**')

	task.outputs.file monitorApk(apiLevel)

	task.doFirst {
		delete libsBuilt
		copy { it.from libCommonJarTask.archivePath into libsBuilt }
		copyFileWithRename(generatedMonitor(apiLevel), monitorJava(apiLevel))
		assert monitorJava(apiLevel).file
	}
	assembleApk(task, apiLevel)

	task.doLast {
		assert apkScaffoldingOutputApk(apiLevel).exists()
		copyFileWithRename(apkScaffoldingOutputApk(apiLevel), monitorApk(apiLevel))
		assert monitorApk(apiLevel).exists()
	}
}

task buildMonitorApk_api23(type: GradleBuild) { buildMonitorApk(it as GradleBuild, 23) }

clean.configure {

	delete generatedMonitor(23)
	delete generatedMonitor(23).parent

	delete monitorJava(23)

	delete libsBuilt
	delete apkScaffoldingOutput

	delete monitorApk(23)
}

build.dependsOn "buildMonitorApk_api23"

// Tests not included because the test shouldn't be run as part of a test suite.
configureTest(project, [''])
*/